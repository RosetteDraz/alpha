package koko;

import java.io.BufferedReader;  
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;

import javax.swing.JButton;
import javax.swing.JFileChooser;

public class wordCount {
	public static void main(String[] args) throws IOException 
	{ 
		JButton open = new JButton();
		JFileChooser fileChooser = new JFileChooser();
		fileChooser.setMultiSelectionEnabled(true);
		fileChooser.setCurrentDirectory(new java.io.File("C:/dialog"));
		fileChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
		fileChooser.showOpenDialog(open);
		System.out.println("Selected file: " + fileChooser.getSelectedFile().getAbsolutePath());
		
		File[] files = fileChooser.getSelectedFiles();
		StringBuffer stringBuffer = new StringBuffer();
		if (files.length == 0) {
		return;
		}
		List<List<String>> documents = Arrays.asList();
		for (int i = 0; i < files.length; i++) {
			File file = files[i];
			FileReader fileReader=new FileReader(file);
			BufferedReader br = new BufferedReader(fileReader);
			String line;
			while ((line = br.readLine())!= null)
			{
			stringBuffer.append(" ");
			stringBuffer.append(line);	
			}
			fileReader.close(); 
			txtClean(stringBuffer);
			String everything=stringBuffer.toString();
			String [] stwords=everything.split("\\s+");
			List<String> myList = Arrays.asList(stwords);
		}
		//clean the text
		
		wordC(myList);
		wordCount calculator = new  wordCount();

		double tfidf = calculator.tfIdf(myList,documents, "of");

		System.out.println("TF-IDF (of) = " + tfidf);
		
	}
	
	public static void wordC(List<String> doc) {
		
		HashMap<String, Integer> hm = new HashMap<String, Integer>();
		for(int c =0; c<doc.size();c++)
		{
			System.out.println(doc.get(c));
			if(!hm.containsKey(doc.get(c))) {
				hm.put(doc.get(c),1);
			}
			else {
				
				hm.put(doc.get(c), hm.get(doc.get(c)) + 1);
			}
		}
		System.out.println(hm);
	}
	
	public static void txtClean(StringBuffer stringBuffer) {
		
		for(int i=0; i< stringBuffer.length();i++)
		{
			if(stringBuffer.charAt(i)!=' ' &&
					!((stringBuffer.charAt(i)>='A' && stringBuffer.charAt(i)<='Z')||
							(stringBuffer.charAt(i)>='a' && stringBuffer.charAt(i)<='z')))
			{
				stringBuffer.deleteCharAt(i);
				i--;
			} 
		}

	}

	public double tf(List<String> doc, String term) {

		double result = 0;

		for (String word : doc) {

			if (term.equalsIgnoreCase(word))

				result++;

		}	

		return result / doc.size();
	        		
	}

	public double idf(List<List<String>> docs, String term) {

		double n = 0;

		for (List<String> doc : docs) {

			for (String word : doc) {
				
				if (term.equalsIgnoreCase(word)) {

					n++;
             
					break;

				}

			}

		}

		return Math.log(docs.size() / n);

	}
	
	public double tfIdf(List<String> doc, List<List<String>> docs, String term) {
		return tf(doc, term) * idf(docs, term);

	}	
}

	

